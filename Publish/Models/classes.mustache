const database = require('../../database/sqlite-wrapper.js')('../../Database/{{dbname}}');
const schema = require("../../schemas/Schema-{{classTitle}}.json");
const jsf = require('json-schema-faker');
const faker = require('faker');
jsf.extend('faker', () => { return faker });

class {{classTitle}} {
    constructor ({{constructorArguments}}) { 
        {{#classConstructor}}
        this.{{name}} = {{name}}; 
        {{/classConstructor}} 
        {{#classEnumerables}} 
        Object.defineProperty(this,"{{name}}", { enumerable: false }); 
        {{/classEnumerables}}
        Object.defineProperty(this,"{{primaryKey}}", { enumerable: false, writable: true });
    }

    static create() {
        return Object.assign(new {{classTitle}}(), jsf.generate(schema));
    }

    static all(callback) {
        database.where("SELECT * FROM {{tableName}}", [], {{classTitle}}, callback);
    }

    static get(callback) {
        database.get("SELECT * FROM {{tableName}} WHERE {{primaryKey}} = ?", [{{primaryKey}}], {{tableName}}, callback);
    }

    static delete(callback) {
        database.run("DELETE FROM {{tableName}} WHERE {{primaryKey}} = ?", [{{primaryKey}}], callback);
    }

    save(callback) {
        if(this.{{primaryKey}})
            database.run("UPDATE {{tableName}} SET {{{updateValuesParams}}} WHERE {{primaryKey}} = ?", [{{thisPropreties}}], callback);
        else
            database.run("INSERT INTO {{tableName}} ({{columns}}) VALUES ({{valuesParams}})", [{{thisPropreties}}], callback);        
    }
}

module.exports = {{classTitle}};